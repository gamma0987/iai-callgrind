# spell-checker:ignore taiki rustfmt binstall clippy taplo rustup nocapture
# spell-checker:ignore nofile gnuabi armv gnueabi mipsel

name: Build and Check

on:
  push:
    branches: ["main", "cicd", "release", "develop", "[0-9]+-*"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: "1"

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  deny:
    name: Check dependencies/ubuntu-latest
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - checks: advisories
            arguments: --deny warnings
          - checks: bans licenses sources
    steps:
      - uses: actions/checkout@v4
      - uses: EmbarkStudios/cargo-deny-action@v1
        with:
          rust-version: "1.66.0" # MSRV
          command: check ${{ matrix.config.arguments }} ${{ matrix.config.checks }}

  minimal_versions:
    name: Check minimal version requirements of dependencies
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - "1.66.0" # MSRV
          - stable
          - nightly
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
      - uses: Swatinem/rust-cache@v2.2.0
        with:
          key: ubuntu-latest_${{ matrix.toolchain }}
      - uses: taiki-e/install-action@cargo-hack
      - uses: taiki-e/install-action@cargo-minimal-versions
      - name: Check build with minimal versions
        run: cargo minimal-versions check --workspace --all-targets --ignore-private

  format:
    name: Check format and spelling
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: npm install prettier
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      - uses: taiki-e/install-action@cargo-binstall
      - run: cargo binstall --no-confirm --no-symlinks taplo-cli
      - run: cargo fmt --check
      - run: taplo fmt --check --verbose
      - run: npx prettier --check --log-level warn '**/*.json' '**/*.yml'
      - uses: streetsidesoftware/cspell-action@v3
        with:
          incremental_files_only: false
          verbose: true

  base:
    needs: [format]
    name: Build, check and test
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - "1.66.0" # MSRV
          - stable
          - nightly
        include:
          - toolchain: "1.66.0" # MSRV
            ui_tests: --features ui_tests
            components: rust-src
          - toolchain: stable
            components: clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          components: ${{ matrix.components }}
      - name: Prepare
        if: matrix.toolchain != 'stable'
        run: |
          rustup toolchain install stable --no-self-update --component clippy
      - uses: taiki-e/install-action@cargo-hack
      - uses: Swatinem/rust-cache@v2.2.0
        with:
          key: ubuntu-latest_${{ matrix.toolchain }}
      - name: Install valgrind
        run: sudo apt-get -y update && sudo apt-get -y install valgrind
      - name: Info
        run: |
          set -x
          uname -a
          pwd
          rustup --version
          rustup show
          rustup component list --installed
          valgrind --version
      - name: Build with the feature powerset
        run: cargo hack --workspace --exclude client-request-tests --feature-powerset --exclude-features ui_tests build
      - name: Lint
        run: cargo +stable clippy --all-features --all-targets -- -D warnings
      - name: Test
        run: |
          set -o pipefail
          cargo test --workspace --exclude client-request-tests ${{ matrix.ui_tests }} |& tee test.output
      - name: Check test output for ui errors
        if: ${{ matrix.ui_tests && failure() }}
        run: |
          if grep -q '^test ui \.\.\. FAILED$' test.output; then
            TRYBUILD=overwrite cargo test ${{ matrix.ui_tests }} ui
            git diff iai-callgrind/tests/ui
          fi
          exit 1
      - name: Check summary.json schema is up-to-date
        run: |
          cargo run -p iai-callgrind-runner --features schema --bin schema-gen
          npx prettier --write summary.schema.json
          diff summary.schema.json iai-callgrind-runner/schemas/summary.v1.schema.json
      - name: Bench
        run: cargo run --package benchmark-tests --profile=bench --bin bench
        # env:
        # IAI_CALLGRIND_LOG: trace
      - uses: actions/upload-artifact@v3
        with:
          name: iai-callgrind-benchmarks
          path: "target/iai"

  client_requests:
    needs: [format]
    name: Test client requests
    strategy:
      fail-fast: false
      matrix:
        job:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
          - os: ubuntu-latest
            target: s390x-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
          - os: ubuntu-latest
            target: powerpc-unknown-linux-gnu
          - os: ubuntu-latest
            target: powerpc64-unknown-linux-gnu
          - os: ubuntu-latest
            target: powerpc64le-unknown-linux-gnu
    runs-on: ${{ matrix.job.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: taiki-e/install-action@cross
      - uses: Swatinem/rust-cache@v2.2.0
        with:
          key: cross_${{ matrix.job.os }}_${{ matrix.job.target }}
      - name: Info
        run: |
          set -x
          uname -a
          pwd
          rustup --version
          rustup show
          rustup component list --installed
      - name: Test client requests
        run: cross test --package client-request-tests --target ${{ matrix.job.target }} --test tests --release -- --nocapture
        env:
          CROSS_CONTAINER_OPTS: "--ulimit nofile=1024:4096"
          # CROSS_DEBUG: "1"

  docs:
    needs: [base, client_requests]
    name: Docs/ubuntu-latest
    runs-on: ubuntu-latest
    env:
      DOCS_RS: "1"
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
      - uses: Swatinem/rust-cache@v2.2.0
      - name: Build iai-callgrind without valgrind headers
        run: cargo build --package iai-callgrind --features client_requests_defs --release
      - name: Run doc tests
        run: cargo test --all-features --doc
      - name: Check Documentation
        run: cargo doc --all-features --no-deps --document-private-items
